// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

// Triangle    T[n]=n(n+1)/2   1, 3, 6, 10, 15, ...
// Pentagonal    P[n]=n(3n−1)/2    1, 5, 12, 22, 35, ...
// Hexagonal   H[n]=n(2n−1)    1, 6, 15, 28, 45, ...
// It can be verified that T[285] = P[165] = H[143] = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.

var should = require('should');

var isTriangular = require('is-triangular');
[1, 3, 6, 10, 15].every(isTriangular).should.eql(true);
[2, 4, 7, 11, 16].some(isTriangular).should.eql(false);

var isPentagonal = require('is-pentagonal');
[1, 5, 12, 22, 35].every(isPentagonal).should.eql(true);
[0, 4, 11, 21, 34].some(isPentagonal).should.eql(false);

function hexagonal(n) {
  return n * (2 * n - 1);
}
[1, 2, 3, 4, 5].map(hexagonal).should.eql([1, 6, 15, 28, 45]);

var sample = 40755;
(isTriangular(sample)).should.eql(true);
(isPentagonal(sample)).should.eql(true);
hexagonal(143).should.eql(sample);

var number, n;
for (n = 144; n < 10000; n++) {
  number = hexagonal(n);
  if (isTriangular(n) && isPentagonal(n)) {
    console.log(number); // 87990 [Finished in 0.1s]
    break;
  }
}

// Sorry, but the answer you gave appears to be incorrect.
